

///////////////////////////////////////////////////////////////////////////////
// ListEntry<T>
///////////////////////////////////////////////////////////////////////////////

template<class T> ListEntry<T>::ListEntry(T *obj)
	: m_obj(obj), m_next((ListEntry<T>*) 0)
{}


///////////////////////////////////////////////////////////////////////////////
// List<T>
///////////////////////////////////////////////////////////////////////////////


template<class T> List<T>::List(bool isOwner /*= false*/)
	: m_head((ListEntry<T>*) 0), m_tail((ListEntry<T>*) 0), m_count(0), m_isOwner(isOwner)
{}

template<class T> List<T>::~List()
{
	clear();
}


template<class T> List<T> *List<T>::add(T *obj)
{
	ListEntry<T> *e = new ListEntry<T>(obj);
	m_count++;
	if(m_tail) {
		m_tail->m_next = e;
		m_tail = e;
	} else {
		m_head = m_tail = e;
	}
	return this;
}


template<class T> List<T> *List<T>::prepend(T *obj)
{
	ListEntry<T> *e = new ListEntry<T>(obj);
	m_count++;
	if(m_head) {
		e->m_next = m_head;
		m_head = e;
	} else {
		m_head = m_tail = e;
	}
	return this;
}


template<class T> void List<T>::remove(T *obj)
{
	ListEntry<T> *e = m_head;
	if(!e) {
		return;
	}

	if(e->m_obj == obj) {
		m_head = e->m_next;
		if(!e->m_next) {
			m_tail = 0L;
		}
		if(m_isOwner && e->m_obj) {
			delete e->m_obj; e->m_obj = (T*)0;
		}
		delete e;
		m_count--;
		return;
	}

	while(e) {
		ListEntry<T> *n = e->m_next;
		if(n && (n->m_obj == obj)) {
			e->m_next = n->m_next;
			if(!n->m_next) {
				m_tail = e;
			}
			if(m_isOwner && n->m_obj) {
				delete n->m_obj; n->m_obj = (T*)0;
			}
			delete n;
			m_count--;
			return;
		}
		e = n;
	}
}

//template<class T> void List<T>::print(int indent) const
//{
//	for(ListEntry<T> *e = m_head; e; e = e->m_next) {
//		if(e->m_obj) { e->m_obj->print(indent); }
//	}
//}


template<class T> int List<T>::size() const
{
	return m_count;
}


template<class T> void List<T>::setIsOwner(bool isOwner)
{
	m_isOwner = isOwner;
}


template<class T> void List<T>::clear()
{
	ListEntry<T> *e = m_head;
	while(e) {
		ListEntry<T> *n = e->m_next;
		if(m_isOwner && e->m_obj) {
			delete e->m_obj; e->m_obj = (T*)0;
		}
		delete e;
		e = n;
	}
	m_head = (ListEntry<T>*) 0;
	m_tail = (ListEntry<T>*) 0;
	m_count = 0;
}


///////////////////////////////////////////////////////////////////////////////
// ListIterator<T>
///////////////////////////////////////////////////////////////////////////////


template<class T> ListIterator<T>::ListIterator(const List<T> &list)
	: m_list(list), m_pos((ListEntry<T>*) 0)
{}


template<class T> T *ListIterator<T>::first()
{
	m_pos = m_list.m_head;
	return m_pos ? m_pos->m_obj : (T*)0;
}


template<class T> T *ListIterator<T>::next()
{
	m_pos = m_pos ? m_pos->m_next : (ListEntry<T>*)0;
	return m_pos ? m_pos->m_obj : (T*)0;
}

template<class T> int ListIterator<T>::size()
{
	return m_list.size();
}
