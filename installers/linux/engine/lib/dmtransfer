#!/usr/bin/python3

import glob
import hashlib
import json
import os
import re
import shutil
import subprocess
import sys
import tempfile
import yaml
import urllib.parse

from xml.sax.saxutils import escape

import click


def is_not_blank(mystring):
    return bool(mystring and mystring.strip())


def is_blank(mystring):
    return not (mystring and mystring.strip())


def md5sum(filename):
    md5 = hashlib.md5()
    with open(filename, 'rb') as f_md5:
        for chunk in iter(lambda: f_md5.read(128 * md5.block_size), b''):
            md5.update(chunk)
    return md5.hexdigest()


@click.command(context_settings=dict(
    ignore_unknown_options=True,
    allow_extra_args=True,
))
@click.option('-protocol', help='Protocol to use')
@click.option('-sourcedir', help='Source Directory for files to be transfered')
@click.option('-targetdir', help='Target Directory on end point')
@click.option('-user', help='User Id')
@click.option('-password', help='User Password')
@click.option('-target', help='Target OS')
@click.option('-server', help='End Point')
@click.option('-checkbase', help='Base directory on end point')
@click.option('-keyfile', help='Keyfile')
@click.option('-port', help='Port')
@click.option('-rshell', help='Remote shell to use')
@click.option('-tty', help='Use TTY', is_flag=True)
@click.option('-copyscript', help='Copy script to remote', is_flag=True)
@click.option('-dellist', help="Delete Files")
@click.option('-execcmd', nargs=0)
@click.argument('execcmd', nargs=-1, type=click.UNPROCESSED)
def main(protocol, sourcedir, targetdir, user, password, target, server, checkbase, keyfile, port, rshell, tty, copyscript, dellist, execcmd):
    # print command line arguments
    # dmtransfer "-protocol" "win" "-sourcedir" "/tmp/tdm.130.1" "-targetdir" "c:\temp2" "-user" "IEUser" "-password" "Passw0rd!" "-target" "win" "-server" "192.168.3
    # dmtransfer "-protocol" "win" "-server" "192.168.3.139" "-user" "IEUser" "-password" "Passw0rd!" "-checkbase" "d:\temp"
    # dmtransfer "-protocol" "sftp" "-sourcedir" "/tmp/tdm.2761.3" "-targetdir" "/home/openmake/public_html/qa" "-port" "18765" "-user" "openmake" "-keyfile" "/opt/deployhub/engine/keys/openmakesoftware.pem" "-target" "unix" "-server" "37.60.234.52"
    # dmtransfer "-protocol" "sftp" "-server" "192.168.3.105" "-user" "" "-password" "" "-checkbase" "/opt/release-engineer"
    # dmtransfer "-protocol" "sftp" "-server" "192.168.3.125" "-user" "" "-password" "" "-execcmd" "md5sum" "/opt/release-engineer/engine/bin/dm"
    # dmtransfer "-protocol" "sftp" "-server" "77.104.156.73" "-port" "18765" "-user" "?_?TÆŽ" "-password" "???!??" "-checkbase" "/home/deployhub/public_html/downloads/rpms"

    localconnection = ""
    from_cmd = ""
    to_cmd = ""
    errors = []
    success = True
    failed = 0
    unreachable = 0
    chmod_file = ""
    rshell_parms = []
    remote_env = {}

    if (os.path.exists("/tmp/remote.env")):
        proc = subprocess.Popen('cat /tmp/remote.env', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        for line in proc.stdout.readlines():
            line = line.decode('utf-8').rstrip('\n')
            key = line.split("=", 1)[0]
            value = line.split("=", 1)[-1]
            if ("?" not in key):
                remote_env[key] = value

    if (rshell is not None):
        parts = rshell.split()
        rshell = parts[0]
        rshell_parms = parts[1:]

    if isinstance(execcmd, tuple):
        execcmd = list(execcmd)
        if (copyscript is False):
            if (execcmd):
                scname = execcmd[0]
                if (".ps1" in scname.lower() and "powershell.exe" not in scname.lower()):
                    rshell_parms = ["powershell.exe", "-File"]
                if (".vbs" in scname.lower() and "cscript.exe" not in scname.lower()):
                    rshell_parms = ["cscript.exe", "/nologo"]
                if (".wsf" in scname.lower() and "cscript.exe" not in scname.lower()):
                    rshell_parms = ["cscript.exe", "/nologo"]
                if (".js" in scname.lower() and "cscript.exe" not in scname.lower()):
                    rshell_parms = ["cscript.exe", "/nologo"]
                if (".sh" in scname.lower()):
                    chmod_file = scname
                rshell_parms.extend(execcmd)
                execcmd = rshell_parms
            cmd = ' '.join(execcmd)
        else:
            from_cmd = execcmd[0].replace('\\', '/')

            if (protocol == "win"):
                to_cmd = "c:\\temp\\" + os.path.basename(from_cmd)
            else:
                to_cmd = "/tmp/" + os.path.basename(from_cmd)

            execcmd[0] = to_cmd
            if (".ps1" in to_cmd.lower() and "powershell.exe" not in to_cmd.lower()):
                rshell_parms = ["powershell.exe", "-File"]
            if (".vbs" in to_cmd.lower() and "cscript.exe" not in to_cmd.lower()):
                rshell_parms = ["cscript.exe", "/nologo"]
            if (".wsf" in to_cmd.lower() and "cscript.exe" not in to_cmd.lower()):
                rshell_parms = ["cscript.exe", "/nologo"]
            if (".js" in to_cmd.lower() and "cscript.exe" not in to_cmd.lower()):
                rshell_parms = ["cscript.exe", "/nologo"]
            if (".sh" in to_cmd.lower()):
                chmod_file = to_cmd
            rshell_parms.extend(execcmd)
            execcmd = rshell_parms
            qexeccmd = []
            for pcmd in execcmd:
                qexeccmd.append('"' + pcmd + '"')
            execcmd = qexeccmd
            cmd = "'" + ' '.join(execcmd) + "'"
    else:
        cmd = ""

    if (cmd is None):
        cmd = ""

    if ("cmd /c \"" in cmd):
        cmd = cmd.replace("cmd /c \"", '')
        cmd = cmd[:-1]

    if (port is None):
        if (protocol == "win"):
            port = None
        else:
            port = 22

    if (server == "localhost"):
        server = "127.0.0.1"
        localconnection = " --connection=local"

    delfiles = []
    if (dellist is not None):
        proc = subprocess.Popen('cat ' + dellist, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        for line in proc.stdout.readlines():
            line = line.decode('utf-8').rstrip('\n')
            if (protocol == "win"):
                line = line.replace("/", "\\")
            delfiles.append(line)
    else:
        delfiles = None

    tempdir = tempfile.mkdtemp()
    os.chdir(tempdir)
    os.mkdir('group_vars')

    if (is_not_blank(cmd)):
        # Execute remote command

        if (protocol == "win"):
            fp_hosts = open('hosts', 'w')
            fp_hosts.write("[windows]\n")
            fp_hosts.write(server + "\n")
            fp_hosts.close()

            fp_win = open('group_vars/windows.yml', 'w')
            if (user is not None):
                fp_win.write("ansible_user: '" + user + "'\n")
            if (password is not None):
                fp_win.write("ansible_password: '" + password + "'\n")
            if (port is not None):
                fp_win.write("ansible_port: '" + str(port) + "'\n")
            fp_win.write("ansible_connection: winrm\n")
            fp_win.write("ansible_winrm_transport: credssp\n")
            fp_win.write("ansible_winrm_server_cert_validation: ignore\n")
            fp_win.write("validate_certs: false\n")
            fp_win.close()

            fp_run = open('runit.yml', 'w')
            fp_run.write("---\n")
            fp_run.write("- name: Execute File\n")
            fp_run.write("  hosts: all\n")
            fp_run.write("  gather_facts: no\n")

            if (bool(remote_env)):
                fp_run.write("  environment:\n")
                for key, value in remote_env.items():
                    fp_run.write("     " + key + ": " + value + "\n")

            fp_run.write("\n")
            fp_run.write("  tasks:\n")
            fp_run.write("\n")

            if (is_not_blank(from_cmd)):
                with open(from_cmd, 'r') as fin:
                    text = fin.read()
                with open(from_cmd, 'w', newline="\r\n") as fout:
                    fout.write(text)

                fp_run.write("  - name: Copy File\n")
                fp_run.write("    win_copy:\n")
                fp_run.write("      src: " + from_cmd + "\n")
                fp_run.write("      dest: " + to_cmd + "\n")

            fp_run.write("  - name: Execute File\n")
            if (rshell is not None):
                fp_run.write("    win_command: " + rshell + " " + cmd + " 2>&1\n")
            else:
                fp_run.write("    win_command: " + cmd + " 2>&1\n")
            fp_run.write("    register: cat\n")
            fp_run.write("    changed_when: False\n")
            fp_run.write("  - name: Print Output\n")
            fp_run.write("    debug: var=cat.stdout_lines\n")
            fp_run.write("  - name: Print Error\n")
            fp_run.write("    debug: var=cat.stderr\n")
            fp_run.close()
        else:
            fp_hosts = open('hosts', 'w')
            fp_hosts.write("[linux]\n")
            fp_hosts.write(server + "\n")
            fp_hosts.close()

            fp_linux = open('group_vars/linux.yml', 'w')
            if (user is not None):
                fp_linux.write("ansible_user: '" + user + "'\n")
            if (password is not None):
                fp_linux.write("ansible_password: '" + password + "'\n")
            if (keyfile is not None):
                fp_linux.write("ansible_ssh_private_key_file: '" + keyfile + "'\n")
            if (port is not None):
                fp_linux.write("ansible_port: '" + str(port) + "'\n")
            fp_linux.write("validate_certs: false\n")
            fp_linux.close()

            fp_run = open('runit.yml', 'w')
            fp_run.write("---\n")
            fp_run.write("- name: Execute File\n")
            fp_run.write("  hosts: all\n")
            fp_run.write("  gather_facts: no\n")

            if (bool(remote_env)):
                fp_run.write("  environment:\n")
                for key, value in remote_env.items():
                    fp_run.write("     " + key + ": " + value + "\n")

            fp_run.write("\n")
            fp_run.write("  tasks:\n")
            fp_run.write("\n")

            if (is_not_blank(from_cmd)):
                fp_run.write("  - name: Copy File\n")
                fp_run.write("    copy:\n")
                fp_run.write("      src: " + from_cmd + "\n")
                fp_run.write("      dest: " + to_cmd + "\n")
                fp_run.write("      mode: 0755 \n")
                fp_run.write("\n")

            if (is_not_blank(chmod_file)):
                fp_run.write("  - name: Chmod File\n")
                fp_run.write("    file:\n")
                fp_run.write("      path: " + chmod_file + "\n")
                fp_run.write("      mode: 0755\n")
                fp_run.write("\n")

            fp_run.write("  - name: " + cmd + "\n")
            fp_run.write("    shell: " + cmd + "\n")
            if (rshell is not None):
                fp_run.write("    args: \n")
                fp_run.write("      executable: " + rshell + "\n")
            fp_run.write("    register: cat\n")
            fp_run.write("    changed_when: False\n")
            fp_run.write("  - name: Print Output\n")
            fp_run.write("    debug: var=cat.stdout_lines\n")
            fp_run.close()

    elif (delfiles is not None):
        # delete files from remote
        if (protocol == "win"):
            fp_hosts = open('hosts', 'w')
            fp_hosts.write("[windows]\n")
            fp_hosts.write(server + "\n")
            fp_hosts.close()

            fp_win = open('group_vars/windows.yml', 'w')
            if (user is not None):
                fp_win.write("ansible_user: '" + user + "'\n")
            if (password is not None):
                fp_win.write("ansible_password: '" + password + "'\n")
            if (port is not None):
                fp_win.write("ansible_port: '" + str(port) + "'\n")
            fp_win.write("ansible_connection: winrm\n")
            fp_win.write("ansible_winrm_transport: credssp\n")
            fp_win.write("ansible_winrm_server_cert_validation: ignore\n")
            fp_win.write("validate_certs: false\n")
            fp_win.close()

            fp_run = open('runit.yml', 'w')
            fp_run.write("---\n")
            fp_run.write("- name: Delete File\n")
            fp_run.write("  hosts: all\n")
            fp_run.write("  gather_facts: no\n")

            if (bool(remote_env)):
                fp_run.write("  environment:\n")
                for key, value in remote_env.items():
                    fp_run.write("     " + key + ": " + value + "\n")

            fp_run.write("\n")
            fp_run.write("  tasks:\n")

            for fname in delfiles:
                fp_run.write("  - name: delete remote file\n")
                fp_run.write("    win_file:\n")
                fp_run.write("      path: " + fname + "\n")
                fp_run.write("      state: absent\n")

            fp_run.close()
        else:
            fp_hosts = open('hosts', 'w')
            fp_hosts.write("[linux]\n")
            fp_hosts.write(server + "\n")
            fp_hosts.close()

            fp_linux = open('group_vars/linux.yml', 'w')
            if (user is not None):
                fp_linux.write("ansible_user: '" + user + "'\n")
            if (password is not None):
                fp_linux.write("ansible_password: '" + password + "'\n")
            if (keyfile is not None):
                fp_linux.write("ansible_ssh_private_key_file: '" + keyfile + "'\n")
            if (port is not None):
                fp_linux.write("ansible_port: '" + str(port) + "'\n")
            fp_linux.write("validate_certs: false\n")
            fp_linux.close()

            fp_run = open('runit.yml', 'w')
            fp_run.write("---\n")
            fp_run.write("- name: Delete File\n")
            fp_run.write("  hosts: all\n")
            fp_run.write("  gather_facts: no\n")

            if (bool(remote_env)):
                fp_run.write("  environment:\n")
                for key, value in remote_env.items():
                    fp_run.write("     " + key + ": " + value + "\n")

            fp_run.write("\n")
            fp_run.write("  tasks:\n")

            for fname in delfiles:
                fp_run.write("  - name: delete remote file\n")
                fp_run.write("    file:\n")
                fp_run.write("      path: " + fname + "\n")
                fp_run.write("      state: absent\n")

            fp_run.close()
    else:
        #
        # Push files
        #
        if (checkbase is None):
            from_dir = sourcedir.rstrip('/') + '/'
            to_dir = targetdir.rstrip('/')
        else:
            from_dir = None
            to_dir = checkbase

        if (protocol == "win"):
            fp_hosts = open('hosts', 'w')
            fp_hosts.write("[windows]\n")
            fp_hosts.write(server + "\n")
            fp_hosts.close()

            fp_win = open('group_vars/windows.yml', 'w')
            if (user is not None):
                fp_win.write("ansible_user: '" + user + "'\n")
            if (password is not None):
                fp_win.write("ansible_password: '" + password + "'\n")
            if (port is not None):
                fp_win.write("ansible_port: '" + str(port) + "'\n")
            fp_win.write("ansible_connection: winrm\n")
            fp_win.write("ansible_winrm_transport: credssp\n")
            fp_win.write("ansible_winrm_server_cert_validation: ignore\n")
            fp_win.write("validate_certs: false\n")
            fp_win.close()

            fp_run = open('runit.yml', 'w')
            fp_run.write("---\n")
            fp_run.write("- name: Transfer File\n")
            fp_run.write("  hosts: all\n")
            fp_run.write("  gather_facts: no\n")

            if (bool(remote_env)):
                fp_run.write("  environment:\n")
                for key, value in remote_env.items():
                    fp_run.write("     " + key + ": " + value + "\n")

            fp_run.write("\n")
            fp_run.write("  tasks:\n")
            fp_run.write("  - name: Make Dir\n")
            fp_run.write("    win_file:\n")
            fp_run.write("      path: " + to_dir + "\n")
            fp_run.write("      state: directory\n")

            if (from_dir is not None):
                fp_run.write("\n")
                fp_run.write("  - name: Copy File\n")
                fp_run.write("    win_copy:\n")
                fp_run.write("      src: " + from_dir + "\n")
                fp_run.write("      dest: " + to_dir + "\n")
                fp_run.write("    register: copyoutput\n")
                fp_run.write("  - name: Print Output\n")
                fp_run.write("    debug: var=copyoutput\n")
            fp_run.close()
        else:
            fp_hosts = open('hosts', 'w')
            fp_hosts.write("[linux]\n")
            fp_hosts.write(server + "\n")
            fp_hosts.close()

            fp_vars = open('group_vars/linux.yml', 'w')
            if (user is not None):
                fp_vars.write("ansible_user: '" + user + "'\n")
            if (password is not None):
                fp_vars.write("ansible_password: '" + password + "'\n")
            if (keyfile is not None):
                fp_vars.write("ansible_ssh_private_key_file: '" + keyfile + "'\n")
            if (port is not None):
                fp_vars.write("ansible_port: '" + str(port) + "'\n")
            fp_vars.write("validate_certs: false\n")
            fp_vars.close()

            fp_run = open('runit.yml', 'w')
            fp_run.write("---\n")
            fp_run.write("- name: Transfer File\n")
            fp_run.write("  hosts: all\n")
            fp_run.write("  gather_facts: no\n")

            if (bool(remote_env)):
                fp_run.write("  environment:\n")
                for key, value in remote_env.items():
                    fp_run.write("     " + key + ": " + value + "\n")

            fp_run.write("\n")
            fp_run.write("  tasks:\n")
            fp_run.write("  - name: Make Dir\n")
            fp_run.write("    file:\n")
            fp_run.write("      path: " + to_dir + "\n")
            fp_run.write("      state: directory\n")

            if (from_dir is not None):
                fp_run.write("\n")
                fp_run.write("  - name: Copy File\n")
                fp_run.write("    copy:\n")
                fp_run.write("      src: " + from_dir + "\n")
                fp_run.write("      dest: " + to_dir + "\n")
                fp_run.write("    register: copyoutput\n")
                fp_run.write("  - name: Print Output\n")
                fp_run.write("    debug: var=copyoutput\n")
            fp_run.close()

    proc = subprocess.Popen('ansible-playbook runit.yml --ssh-common-args="-o StrictHostKeyChecking=no" -i hosts' +
                            localconnection, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    for line in proc.stdout.readlines():
        line = line.decode('utf-8')
        errors.append(line)

        if ("unreachable=" in str(line)):
            findlm = re.findall(r"failed=(\d*)", str(line))
            if (findlm is not None):
                failed = int(findlm[0])

            findlm = re.findall(r"unreachable=(\d*)", str(line))
            if (findlm is not None):
                unreachable = int(findlm[0])

        if (failed > 0 or unreachable > 0 or "ERROR!" in line):
            success = False
    proc.wait()

    data = None

    with tempfile.NamedTemporaryFile(mode='w+t', dir='/tmp', suffix='.log', prefix='ansible_', delete=True) as fplog:
        if (protocol is not None):
            fplog.write("-protocol \"" + protocol + "\" ")
        if (sourcedir is not None):
            fplog.write("-sourcedir \"" + sourcedir + "\" ")
        if (targetdir is not None):
            fplog.write("-targetdir \"" + targetdir + "\" ")
        if (user is not None):
            fplog.write("-user \"" + user + "\" ")
        if (target is not None):
            fplog.write("-target \"" + target + "\" ")
        if (server is not None):
            fplog.write("-server \"" + server + "\" ")
        if (checkbase is not None):
            fplog.write("-checkbase \"" + checkbase + "\" ")
        if (keyfile is not None):
            fplog.write("-keyfile \"" + keyfile + "\" ")
        if (port is not None):
            fplog.write("-port \"" + str(port) + "\" ")
        if (rshell is not None):
            fplog.write("-rshell \"" + rshell + "\" ")
        if (tty):
            fplog.write("-tty ")
        if (copyscript):
            fplog.write("-copyscript ")
        if (execcmd is not None):
            fplog.write("-execcmd \"" + ' '.join(execcmd) + "\"\n")
        fplog.write("\n")

        fpin = open("runit.yml", "r")
        line = str(fpin.read())
        fpin.close()
        fplog.write(line)
        fplog.write("\n")

        onjson = False
        jsonstr = "{"

        for line in errors:
            fplog.write(line)
            if (not success):
                print(line.rstrip('\n'), file=sys.stderr)

            if ("=> {" in line):
                onjson = True
            elif (onjson):
                jsonstr = jsonstr + line
                if (is_blank(line)):
                    onjson = False

        if ("{" in jsonstr and "}" in jsonstr):
            # jsonstr = jsonstr.replace(']\n}',']\n,')
            with open('/tmp/err.txt', 'a') as f: f.write(jsonstr)
            data = json.loads(jsonstr)
        fplog.close()

    print(cmd)
    if (data is not None):
        if ('cat.stderr' in data):
            lines = data['cat.stderr'].split('\\r\\n')
            for line in lines:
            	print(line)

        if ('cat.stdout_lines' in data):
            for line in data['cat.stdout_lines']:
            	print(line)
        else:
            print("<files>")
            for filename in glob.iglob(from_dir + '**/*', recursive=True):
                if (os.path.isfile(filename)):
                    md5 = md5sum(filename)
                    filesize = os.path.getsize(filename)
                    filename = filename[len(from_dir):]
                    targetdir = os.path.dirname(to_dir + "/" + filename)
                    if (protocol == "win"):
                        targetdir = targetdir.replace('/', '\\')
                    sourcedir = os.path.dirname(filename)
                    filename = os.path.basename(filename)

                    print("<file>")
                    print("  <sourcedir>" + escape(sourcedir) + "</sourcedir>")
                    print("  <targetdir>" + escape(targetdir) + "</targetdir>")
                    print("  <filename>" + escape(filename) + "</filename>")
                    print("  <size>" + str(filesize) + "</size>")
                    print("  <mode></mode>")
                    print("  <error>N</error>")
                    print("  <errortext></errortext>")
                    print("  <md5>" + str(md5) + "</md5>")
                    print("</file>")
            print("</files>")

    os.chdir('/tmp')
    shutil.rmtree(tempdir)
    if (success):
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == "__main__":
    #    f = open("/tmp/args.txt", "a")
    #    pprint(sys.argv, f)
    #    f.close()
    main()
